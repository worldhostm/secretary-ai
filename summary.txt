⏺ 음성 비서 AI 포트폴리오 정리

  프로젝트 개요

  브라우저 Web Speech API를 활용한 음성 기반 일정/메모 관리 시스템

  사용자가 음성으로 일정을 등록하고 메모를 저장할 수 있으며, AI가 자연어를 해석하여 적절한 기능을
  실행하는 스마트 음성 비서 웹 애플리케이션

  핵심 기술 스택

  Frontend Framework

  - Next.js 15.5.2 (App Router 방식)
    - React 18 기반 풀스택 프레임워크
    - SSR/CSR 하이브리드 렌더링
    - Turbopack 번들러 활용

  언어 & 타입시스템

  - TypeScript 5
    - 강타입 시스템으로 런타임 오류 방지
    - Web Speech API 커스텀 타입 정의
    - 인터페이스 기반 데이터 모델링

  스타일링 & UI

  - Tailwind CSS 4
    - Utility-first CSS 프레임워크
    - 반응형 디자인 구현
    - 그라데이션 배경 및 다크테마 지원
  - Lucide React
    - 일관된 아이콘 시스템

  상태 관리

  - Zustand 4.4.7
    - 경량화된 상태 관리 라이브러리
    - 중앙집중식 전역 상태 관리
    - TypeScript 완벽 지원

  브라우저 API 활용

  - Web Speech API
    - Speech Recognition: 음성을 텍스트로 변환
    - Speech Synthesis: 텍스트를 음성으로 변환
    - 실시간 음성 처리 및 한국어 지원

  데이터 저장

  - localStorage
    - 클라이언트 사이드 데이터 영속성
    - JSON 직렬화/역직렬화
    - 브라우저별 호환성 처리

  아키텍처 구조

  디렉토리 구조

  src/
  ├── app/                    # Next.js App Router
  ├── components/            # 재사용 가능한 React 컴포넌트
  ├── hooks/                 # 커스텀 훅 (비즈니스 로직 분리)
  ├── lib/                   # 서비스 계층 및 유틸리티
  └── types/                 # TypeScript 타입 정의

  계층별 책임

  1. Presentation Layer (React Components)
  - VoiceAssistantInterface.tsx: 메인 UI 컴포넌트
  - 사용자 인터랙션 처리 및 상태 표시

  2. Hook Layer (Custom Hooks)
  - useSpeechToText.ts: 음성 인식 로직 캡슐화
  - useTextToSpeech.ts: 음성 합성 로직 캡슐화
  - 브라우저 API 추상화 및 에러 처리

  3. Service Layer (Business Logic)
  - voiceAssistant.ts: 자연어 처리 및 명령 라우팅
  - scheduleService.ts: 일정 관리 비즈니스 로직
  - memoService.ts: 메모 관리 비즈니스 로직

  4. Data Layer (State Management)
  - store/index.ts: Zustand 기반 전역 상태 관리
  - localStorage 인터페이스 제공

  핵심 기능 구현

  1. 실시간 음성 인식 시스템

  // 브라우저 호환성 체크 + 실시간 텍스트 변환
  const recognition = new SpeechRecognition();
  recognition.continuous = false;
  recognition.interimResults = true;
  recognition.lang = 'ko-KR';

  2. 자연어 처리 (NLP) 엔진

  // 키워드 매칭 + 정규표현식 기반 파싱
  private static parseNaturalLanguageSchedule(text: string) {
    // "내일 오후 3시에 회의" → {date: "2024-01-16", time: "15:00", title: "회의"}
  }

  3. 상태 관리 패턴

  // Zustand를 통한 반응형 상태 관리
  interface AppState {
    isListening: boolean;
    currentTranscript: string;
    schedules: Schedule[];
    voiceMemos: VoiceMemo[];
  }

  기술적 도전과 해결책

  1. 브라우저 호환성 이슈

  문제: Web Speech API의 제한적 브라우저 지원
  해결: 런타임 기능 감지 및 fallback UI 제공

  2. 서버사이드 렌더링 충돌

  문제: window 객체 undefined 에러
  해결: typeof window !== 'undefined' 가드 클로즈 적용

  3. 자연어 처리 정확도

  문제: 한국어 시간/날짜 표현의 다양성
  해결: 정규표현식 패턴 매칭으로 다양한 표현 형태 지원

  4. 실시간 상태 동기화

  문제: 음성 인식 상태와 UI 상태 불일치
  해결: Zustand 중앙 상태 관리로 단일 진실 소스 구현

  성능 최적화

  1. 번들 최적화

  - Next.js Turbopack으로 빠른 개발 서버
  - Tree-shaking을 통한 불필요한 코드 제거

  2. 메모리 관리

  - useRef를 통한 Speech Recognition 객체 재사용
  - 컴포넌트 언마운트 시 리소스 정리

  3. 렌더링 최적화

  - Zustand의 선택적 상태 구독으로 불필요한 리렌더링 방지
  - useEffect 의존성 배열 최적화

  확장 가능한 설계

  1. 모듈화된 서비스 계층

  각 기능(일정, 메모, 음성처리)를 독립적인 서비스로 분리하여 기능 확장 용이

  2. 타입 안전성

  TypeScript 인터페이스로 데이터 모델 정의하여 런타임 오류 방지

  3. 플러그인 아키텍처

  새로운 음성 명령 추가 시 voiceAssistant.ts에 핸들러만 추가하면 되는 구조

  개발 도구 및 환경

  개발 환경

  - Node.js 기반 개발 환경
  - ESLint 코드 품질 관리
  - PostCSS CSS 후처리

  빌드 및 배포

  npm run dev    # 개발 서버 (Turbopack)
  npm run build  # 프로덕션 빌드
  npm run start  # 프로덕션 서버

  프로젝트 특징 요약

  기술적 깊이
  - 브라우저 네이티브 API 활용 전문성
  - TypeScript 고급 타입 시스템 활용
  - 모던 React 패턴 (Hooks, 함수형 컴포넌트)

  사용자 경험
  - 직관적인 음성 인터페이스
  - 실시간 피드백 시스템
  - 반응형 디자인

  코드 품질
  - 계층화된 아키텍처
  - 관심사의 분리
  - 타입 안전성 보장

  이 프로젝트는 모던 웹 기술과 브라우저 API를 깊이 있게 활용하여 실용적인 음성 인터페이스를 구현한
  풀스택 웹 애플리케이션입니다.